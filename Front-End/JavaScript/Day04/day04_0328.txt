
* 자바스크립트 블럭, 논블럭, 동기와 비동기

- 블럭, 논블럭
  프로그램 실행 흐름을 제어하는 방식
  블럭 논블럭 -> 현재 작업이 다른 작업을 실행을 차단하는가?
  동기 비동기 : 현재 작업과 다음 작업이 순서대로 실행되는가?
  
- 제어권
 - 프로그램 실행 중 시스템 자원, 데이터 처리 등의 작업을 관리하는 권한
 - 제어권이 없으면 아무것도 할 수 없다.

자바스크립트는 싱글 스레드 하나이다.
제어권이 하나이다

* 블럭, 논블럭
 - Block : 프로그램이 실행의 제어를 막는다. 동시성이 없다. 이전작업이 끝나기 전까지 다음 작업을 실행하지 않는다. 제어권을 넘기고 반환받기 전까지 기다린다.
 
 ```javascript
 const fs = require('fs');
 const data = fs.readFileSync('./file_path');
 console.log('파일 읽기 완료', data);
 ```
 - Non-Block : 제어권이 함수에게 넘어갔다가 즉시 함수를 실행한 후 바로 제어권을 반환한다.
	```javascript
	 const fs = require('fs');
	 fs.readFile('./file_path', (err, data) => { 
		if(err return err; 
		console.log('파일 읽기 완료', data);
	})
	 ```
	 
블럭과 논블럭의 차이점은 제어권이 어디로 가는지에 대한 것이다.


* 동기(Synchronous), 비동기(asynchronous)
 동기와 비동기는 제어권에 관심을 가지지 않고 결과에 관심이 있다. => 결과를 어떻게 처리할 것인지에 중점을 둔다.


* 동기 : 
 - 제어권을 실행하고 즉시 돌려받는다. 제어권으로 실행된 함수가 완료될 떄까지 결과를 돌려받지 않고 제어권을 준 함수도 실행되지 않는다.
 - 실행이 완료된 후 결과를 돌려받는다.
 - 결과를 기다린다.
 
```javascript
function doWorkSync(){
	const start = Date.now();
	while(Datte.now() < start + 1000);
	console.log('동기 작업 완료');
}
console.log('작업 시작');
doWorkSync();
console.log('다음 작업');
```	

파일 업로드와 같이 블럭과 동기 작업을 진행한다.

* 비동기 :
 - 특정 작업에 대한 진행 상황, 결과 처리를 제어권이 신경 쓰지 않는다.
 - 동기와 비슷하지만 제어권이 반환된 함수에서 결과를 바로 처리하지 않는다. 

비동기 함수를 처리해주기 위한 코드 = 콜백 함수
JS는 논블럭에 비동기다.

Block/Sync
 - 제어권과 결과 처리 순서가 동일한 방식이다.
 - 대표적인 언어는 자바이다.
 
Non-Block/ Sync
 - 제어권은 실행 즉시 반환받기
 - 결과 처리에 대해서 지속적인 관찰(Tracking) (콜스택에 계속 물어본다)
 - 결과가 완료되었을 때 해당 처리를 진행
 - 프로그램 로딩할때 많이 사용한다.

Block/Async
 - block/sync와 같다.
 - 이방식은 나오면 안되는 방식이다.
 - 잘못된 코딩 예시이다.

Non-block/Async
 - 제어권 실행 즉시 반환
 - 결과에 관계없이 자신의 작업 진행한다
 - 결과 처리를 요청 받으면 현재 작업을 마무리한 후 해당 결과 처리 작업을 진행한다.


*Execution Context

```javascript
//Non-Block/Async
const a = () => {
	console.log('1');
}
const b = () => {
	console.log('2');
}
const c = () => {
	setTimeout( () =>{
	 console.log('3');
	}, 1000) // Non-Block/Async이기 때문에 1초 이후로부터 실행을 요청하는 것이다.(즉시 실행이 되는 것이 아님)
 }
}
c();
b();
a();

// 결과
// 2
// 1
// 3
``` 
1. CallStack에 비동기 setTimeout 컨텍스트가 쌓임.

WebAPI는 멀티스레드이다.

* 순서를 억지로 보장시키는 것 => 콜백함수


비동기 처리의 결과 처리에 대한 방법에 대해 알아보자

- Callback
- Promise
- Async /Await

* 콜백 함수
- 미리 비동기/동기 코드라도 ...해당 명시적으로 넘겨주는 것
 - 파라미터로 함수를 넘기는 방식이다.
```javascript
// 동기적 콜백
const fruits = ['apple', 'banana', 'cherry'];
function synCallback(item){
	console.log(item);
}
fruits.map(synCallback);


// 비동기적 콜백
fucntino asyncCallback(){
	console.log('Callback')
}
setTimeout(asyncCallback, 1000);
```
- 전통적 비동기 결과 처리 방법
- 함수를 파라미터로 넘겨 파라미터를 받은 함수에게 실행권을 넘기는 것.
- callback != 비동기 함수
  - 특정 시점에 실행되는 함수
  - 메서드를 콜백 함수로 사용하면 함수 취급.
  
* 콜백 지옥(Callbakc Hell) / 운명의 피라미드(Pyramid of Doom)


* 프로미스(Promise)
 - Callback + Async
 - 비동기 연산을 도와주는 객체
 - 생산자 - 소비자 패턴( Producer - Customer Pattern)
 - 내부에 있는 함수는 즉시 실행 (but resolve, reject를 쓰지 않으면 대기상태가 된다)
 - 실행은 했지만 결과를 기다린다. = fetch
 
 pending(함수 요청은 됐지만 결과를 모름), fulfilled(성공) : 성공적으로 처리되어 promise가 resolve를 통해 결과값을 반환, 
 rejected(실패) : 처리에 실패해서 promise가 reject를
 ```javascript
 const a = new Promise( (resolve, reject) => {
	const isSuccess = true;
	if(isSuccess){
		resolve("작업 성공");
	}
	else{
		reject("작업 실패");
	}	
 })
 ```
fetch() : 함수를 실행하는 코드

* Promise 사용

```javascript
promise
.then( ( result) = >{
	//성공시 동작할 코드
})
.catch( (error) =>{
	//실패시 동작할 코드
})
.finally( () =>{
	// 성공 유무에 상관 없이 마지막에 실행할 코드
})
```

then : promise가 성공적으로 이행되었을 때 실행될 콜백 함수 등록
catch :
finally :

* Promise Hell/Nested Promise
 - Callback Hell에서 유래
  - 여려 겺의 중첩된 Promise로 인해 가독성과 유지보수성이 저하되는 상황
  
 
* Promise Chain
 - 프로미스를 사용하는 패턴 중 하나이다
 - catch문을 통합할 수 있다는 장점이 있따.
 - 연속적이기 때문에 오류가 발생한 지점을 발견하기 어렵다.
 
```javascript
fetch()
.then()
.then()
.catch()
```

* async/await

- promise를 편하게 쓰기 위한 패턴
- 가독성이 매우 올라감.
- 반환값이 resolve객체 혹은 reject 객체이다.
- throw 키워드를 사용해서 reject를 반환해줌.

```javascript



```

* Promise.all()
 - pending상태가 아니게 될때까지 한번에 요청을 보내는 메서드를 의미한다.
 - 동시에 코드 실행을 수행하고 모든 코드의 처리결과를 받을때까지 기다린다.

* Promise.race()
 - 

Promise()를 잠시 멈출 수 있는 방법인
Generator까지 공부를 해야 한다.