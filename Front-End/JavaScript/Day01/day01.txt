
* 프로그래밍 패러다임
 - 프로그래밍(Programming) : 컴퓨터 프로그램을 작성하는 일 = 코드를 작성하는 일
 - 패러다임(Paradigm) : 어떤 한 시대 사람들의 견해나 사고를 근본적으로 규정하고 있는 테두리로서의 인식의 체계
 
* 프로그래밍 패러다임 : 코드를 짤 때 규칙을 정해서 작성하는 것을 의미
 
* 프로그래밍 패러다임을 왜(why)배워야하는 이유
  - 문제 해결 능력		
  - 유연성과 적응성		
  - 코드 품질과 유지 보수	 
  - 팀워크와 커뮤니케이션 	 
  
* 프로그래밍 패러다임의 흐름   
  - 1940년대 ~ : 기계어, 어셈블리 언어
  - 1950년대 ~ : 절차적 프로그래밍
  - 1950년대 ~ : 함수형 프로그래밍
  - 1970년대 ~ : 객체지향 프로그래밍
  - 	    ~ : 논리형, 이벤트 기반, 병렬/동기성

--------------


* 프로그래밍 패러다임의 종류

절차 지향 프로그래밍
- 절차(Produral) : 일을 치르는데 거쳐야 하는 순서나 방법
- 지향(Oriented) : 어떤 목표로 뜻이 쏠리어 향함

객체 지향 프로그래밍
객체(Object) : 의사가 행위가 미치는 대상
지향(Oriented) : 어떤 목표로 뜻이 쏠리어 향함
- 객체라는 독립적인 단위 사용
- 데이터와 해당 데이터를 처리하는 메서드를 묶음
- 객체간 상호 작용으로 프로그래밍 작성
- 유지보수성, 이해하기 쉬운 코드

자료(Data) : 정보를 단순 저장되어있는 것
정보(information) : 자료를 가공해서 특정한 정보를 만드는 것

클래스안에 들어가 있으면 메서드, 밖에 있으면 함수를 의미한다.

함수형 프로그래밍
함수(function) : 기능
불변성(invariability) : 변하지 않는 성질
- 함수의 조합을 통해 문제를 해결
- 상태 변화를 파악
- 데이터의 불변성 유지
- 프로그래밍을 더욱 안정적으로 유지

프로그래밍 패러다임의 선택 기준은 해당 상황에 맞게, 서비스의 유형에 따라 다르다. 

----------------------------

자바스크립트

* 함수(Function) : 기능
  - 동일한 입력값을 넣었을 때 동일한 출력값을 나오는 것을 의미하다. = 수학에서의 함수라는 개념
  - 프로그래밍의 핵심적인 구성요소
  - 특정 작업을 수행하거나 값을 계산하기 위한 코드 블럭
  - 순수함수/일급함수로 구분
  
* 순수함수
  - 주어진 입력이 동일하다면 항상 같은 값을 리턴하는 함수를 의미
  - 함수의 출력은 오직 입력에 의해서만 결정되며, 같은 입력이 주어지는한 같은 출력을 얻을 수 있음

  순수함수의 장점
  - 결정적 동작(Deterministic 동작)
  - 부작용이 없는 코딩

* 일급함수
  - 함수를 변수 취급하는 것을 의미한다.
  - 함수를 다루는데 있어 변수와 동일하게 다루는 방식
  - 함수를 변수에 할당
  - 함수를 다른 함수에 전달
  - 함수가 함수를 반환
  
  일급함수는 콜백 함수를 주로 이용한다.

  JavaScript에서 비동기 작업을 처리할 때 일급 함수의 개념을 사용해 콜백 함수를 넘겨 비동기 작업을 완료된 후의 로직을 실행할 수 있음
  콜백 함수를 넘겨 사용하는 방식은 Callback Hall에 빠질 수 있음

  배열 메서드와 콜백 함수
  : JavaScript의 배열 메서드들은 일급 함수의 개념을 활용 각 원소에 대해 실행할 함수를 인자로 받는다.

  함수가 다른 함수를 반환할 수 있음을 활용, 특정 데이터를 외부로부터 보호할 수 있고 독자적인 흐름을 가질 수 있음
  * 함수 컴포지션(조합)
  : 두 함수를 조합하여 새로운 작업을 수행하는 함수로 만들 수 있음.
 
 
-----------------

* 변수
  - 변수란 ? JavaScript에서 변수는 데이터를 저장하는데 사용되는 이름(실제 주소값을 참조하고 있는 것)이 붙은 저장소. 
  - 변수를 사용함으로 우리가 원하는데로 저장, 수정, 검색을 할 수 있다.

* 변수 사용 방법
  - 변수를 사용하는 방법은 선언, 할당의 키워드로 구분할 수 있음
  
* 선언
  Ex ) let name;
  사용할 변수의 이름을 작성해 사용할 변수를 작성하는 것을 의미, 선언만 사용하게 될 경우 초기 값이 undefined로 설정된다.
  한번 값이 설정되면 수정이 불가능한 const는 선언만 단독으로 사용이 불가능하다.

* 변수 키워드
  - var : var키워드는 가장 오래된 방식 중 하나이며, 현재에는 몇가지 특징 때문에 주로 사용하고 있는 방식은 아니다.
    var로 선언된 변수의 사용 범위는 함수 스코프를 가지게 된다. 이는 해당 변수가 선언된 함수 내에서만 유효함으로 접근할 수 없음을 의미한다.
	유지보수성, 중복선언과 메모리 효율에 문제점이 있음
	
	let, const는 이러한 문제점을 해결하기 위해 ES6(ES2015)에서 새롭게 변수를 선언하는 방식.
	블록스코프영역, 재선언 금지를 가짐
	
  - let : 재할당이 가능함. 이는 프로그래밍에서 변수의 값이 변화할 수 있을 때 사용한다.
  - const : const는 선언과 동시에 할당해주어야함. 그리고 재할당이 불가능함. 초기화할 때 지정된 값으로 고정된다. 
			그러나 객체나 배열같은 경우 객체의 속성이나 배열의 요소를 변경할 수 있다.
  - let으로 선언된 변수는 선언과 동시에 초기화 하지 않아도 됨 <-> const로 선언된 변수는 반드시 선언 시에 초기화 해야 한다.초기화하지 않으면 문법 에러가 발생한다.

* 리터럴(literal)
 - 리터럴은 데이터(값) 그 자체를 의미한다. 즉 변수에 넣는 변하지 않는 데이터를 의미한다.
 
* 리터럴과 상수의 차이점


---------------------------

*인터프리터(interfreter)
 - 인터프리터는 고수준의 프로그래밍 언어로 작성된 소스 코드를 직접 실행하는 프로그램 또는 환경을 의미한다.
 - 컴파일러(complier)와 다르게 인터프리터는 소스 코드를 먼저 기계어로 전체 변환하지 않는다.
   대신, 코드를 한 줄씩 읽어서 요청 즉시 실행하는 방식으로 동작한다. 
   이러한 특징 때문에 인터프리터를 사용하는 언어들은 개발 과정에서 수정 후 빠르게 결과를 볼 수 있는 장점이 있다.

*인터프리터 특징
 - 즉시 실행
 - 
 
* 자바스크립트 엔진
 - 자바스크립트 엔진은 자바스크립트 코드를 해석하고 실행하는 프로그램 또는 인터프리터이다. 일반적으로 웹 브라우저 내에서 동작하지만, Node.js와 같은 서버 사이드 환경에서도 사용가능

* 자바스크립트의 엔진 기본 작동 방식
 1. 생성과 컴파일
 2. 실행

1.
2.
3. 호이스팅


- let과 const를 위주로 사용해야 한다.

렉시컬 스코프는 변수의 접근 범위는 작성 시점을 기준으로 설정된다. 라는 개념이다. 이는 함수가 어디에서 호출되었지와는 무관하게 작성시점을 기준으로 


* 스코프 체인

-----------------------------------------

* 함수
 - 어떤 일을 수행하는 명령들을 하나로 묶어서 이름을 부여하고, 필요할 때마다 그 함수를 호출해서 사용할 수 있는 프로그래밍 방법 중 하나
 - 반복적으로 사용되는 일을 함수로 만들어 놓으면 일의 순서나 방법을 다시 기억할 필요없이 편리하게 사용할 수 있다.
 
* 함수를 사용하는 이유
 - 코드의 재사용성 : 동일한 코드 블록을 여러 곳에서 호출하여 사용, 코드의 불필요한 중복을 피하고 유지보수성 증가
 - 모듈화 : 프로그램을 더 작은 단위로 나눌 수 있음, 프로그램의 복잡성을 줄이고 코드를 논리적으로 구성
   import : export를 통해 내보내는 진 것을 가져다가 사용하는 것을 의미한다. , export : 내가 만든 모듈의 함수, 객체, 변수를 다른 모듈에서 가져다 사용할 수 있도록 내보낼 때 사용한다.
 - 유지보수성 : 코드를 논리적으로 분할하고 구성할 수 있어 이해화 수정이 편리
 - 코드의 가독성 : 함수의 이름을 통해 작업 목록을 직관적으로 이해할 수 있으며, 코드를 읽기 십고 이해하기 쉽도록 만듦
 - 테스트 용이성 :
 
* 함수 작성 방법
 - 함수 작성 방법은 함수 선언문, 함수 표현식, 화살표 함수 타입이 있다.
 
 - 함수 선언문 : function 키워드를 사용해 이름이 있는 함수를 선언하고 정의한다. 해당 함수는 호이스팅에 의해 스코프내 어느곳이든 호출 가능
 - 함수 표현식 : 함수를 변수에 할당하는 방식이다. function 키워드를 사용해 변수에 할당할 수 있음. 해당 방식은 호이스팅은 발생하지만 함수가 할당 되기 전까지는 호출할 수 없음
 - 화살표 함수 : function키워드를 생략하고 => 기호를 사용하여 함수를 더욱 간결하게 표현. {}와 return을 생략할 수 있음
			   또한, 자기 참조인 this를 사용하지 않아 개발자가 보다 명확하고 효율적으로 코드를 작성할 수 있음
			   
----------------------------------------

* 키워드 정리
1. 변수란 ?
   Ans) JavaScript에서 변수는 데이터를 저장하는데 사용되는 이름(즉. 실제 주소값을 참조하고 있는 것)이 붙은 저장소. 
2. 자바스크립트 변수의 종류
   Ans) 자바스크립트의 변수의 종류는 var, let, const가 있다.
3. 선언, 할당
   Ans)
   선언이란 사용할 변수의 이름을 작성해 사용할 변수를 작성하는 것을 의미, 선언만 사용하게 될 경우 초기 값이 undefined로 설정된다.
   할당이란 선언된 변수의 값을 초기화시키는 것을 의미한다.
4. 리터럴 이란?
   리터럴이란 데이터(값) 그 자체를 의미한다. 즉 변수에 넣는 변하지 않는 데이터를 의미한다.
5. var 호이스팅
   호이스팅은 코드가 실행하기 전에 변수 선언/ 함수 선언이 해당 스코프의 최상단으로 끌어올리는 현상을 의미한다.
   var 변수/ 함수의 선언만 위로 끌어올려지며 할당은 끌어 올려지지 않는다.
   
6. 함수란?
   Ans) 어떤 일을 수행하는 명령들을 하나로 묶어서 이름을 부여하고, 필요할 때마다 그 함수를 호출해서 사용할 수 있는 프로그래밍 방법 중 하나로 
   반복적으로 사용되는 일을 함수로 만들어 놓으면 일의 순서나 방법을 다시 기억할 필요없이 편리하게 사용할 수 있다.

7. 함수 표현식, 함수 선언식, 화살표 함수
   함수 표현식이란 함수를 변수에 할당하는 방식으로 function 키웓를 사용해 변수에 할당할 수 있는 식을 의미한다. 호이스팅이 발생하지만 함수가 할당되기 전까지는 호출할 수가 없다.
   함수 선언식이란 function키워드를 사용해서 이름이 있는 함수를 선언하고 정의한다. 해당 함수는 호이스팅에 의해 스코프내 어느곳이든 호출이 가능하다.
   화살표 함수란 function키워드를 생략하고 => 기호를 사용하여 함수를 더욱 간결하게 표현하는 방식으로 ()와 return을 생략할 수 있다. 